//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Data.SqlClient;

namespace SalesApp.Models.Entities
{

    public class Galadventure_TrabajosEntities : DbContext
    {
        public Galadventure_TrabajosEntities()
            : base("name=Galadventure_Entities")
        {
            base.Configuration.ProxyCreationEnabled = false;
            base.Configuration.LazyLoadingEnabled = false;

        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //or configure all DateTime Preperties globally(EF 6 and Above)
            modelBuilder.Properties<DateTime>().Configure(c => c.HasColumnType("datetime2"));
            //modelBuilder.Entity<I_Category>().HasMany(x => x.I_CategoryPlace);
            //modelBuilder.Entity<I_CategoryPlace>().HasRequired(x => x.I_Category);

            //modelBuilder.Entity<PRODUCT_CALENDER>()
            //.HasOptional(rack => rack.CATEGORY_PRODUCT)
            //.WithRequired(relay => relay.PRODUCT_CALENDER);
        }

        public virtual DbSet<ACCT_CAJACHICA> ACCT_CAJACHICA { get; set; }
        public virtual DbSet<ACCT_CAJACHICA_OWNER> ACCT_CAJACHICA_OWNER { get; set; }
        public virtual DbSet<ACCT_CAJACHICA_RESERVATION> ACCT_CAJACHICA_RESERVATION { get; set; }
        public virtual DbSet<ACCT_PAYMENT> ACCT_PAYMENT { get; set; }
        public virtual DbSet<ACCT_PAYMENT_STATUS> ACCT_PAYMENT_STATUS { get; set; }
        public virtual DbSet<ADRESS> ADRESS { get; set; }
        public virtual DbSet<AGENCY> AGENCY { get; set; }
        public virtual DbSet<AGENT> AGENT { get; set; }
        public virtual DbSet<CATEGORY> CATEGORY { get; set; }
        public virtual DbSet<CATEGORY_PRODUCT> CATEGORY_PRODUCT { get; set; }
        public virtual DbSet<COUNTRY> COUNTRY { get; set; }
        public virtual DbSet<GASTOS_OPERATION> GASTOS_OPERATION { get; set; }
        public virtual DbSet<GASTOS_TYPE> GASTOS_TYPE { get; set; }
        public virtual DbSet<GASTOS_TYPE_PROVIDER> GASTOS_TYPE_PROVIDER { get; set; }
        public virtual DbSet<HR_Roles_Anticipos> HR_Roles_Anticipos { get; set; }
        public virtual DbSet<HR_Roles_DateRole> HR_Roles_DateRole { get; set; }
        public virtual DbSet<HR_Roles_TypoPago> HR_Roles_TypoPago { get; set; }
        public virtual DbSet<HR_Roles_Worker> HR_Roles_Worker { get; set; }
        public virtual DbSet<HR_Worker_Detail> HR_Worker_Detail { get; set; }
        public virtual DbSet<PARTNER> PARTNER { get; set; }
        public virtual DbSet<Pax> PAX { get; set; }
        public virtual DbSet<PAYMENT_TYPE> PAYMENT_TYPE { get; set; }
        public virtual DbSet<PRODUCT_CALENDER> PRODUCT_CALENDER { get; set; }
        public virtual DbSet<PRODUCT_CALENDERHOUR> PRODUCT_CALENDERHOUR { get; set; }
        public virtual DbSet<PRODUCT_RESERVATION> PRODUCT_RESERVATION { get; set; }
        public virtual DbSet<PROVIDER> PROVIDER { get; set; }
        public virtual DbSet<PAYMENT_STATUS> PAYMENT_STATUS { get; set; }
        public virtual DbSet<PRODUCT_RESERVATION_TYPE> PRODUCT_RESERVATION_TYPE { get; set; }
        public virtual DbSet<TOUR_DAYS> TOUR_DAYS { get; set; }
        public virtual DbSet<DIVE> DIVE { get; set; }
        public virtual DbSet<I_Agent> I_Agent { get; set; }
        public virtual DbSet<I_Category> I_Category { get; set; }
        public virtual DbSet<I_CategoryPlace> I_CategoryPlace { get; set; }
        public virtual DbSet<I_Days> I_Days { get; set; }
        public virtual DbSet<I_Itinerary> I_Itinerary { get; set; }
        public virtual DbSet<I_MembersNumber> I_MembersNumber { get; set; }
        public virtual DbSet<I_Pax> I_Pax { get; set; }
        public virtual DbSet<I_Proveedor> I_Proveedor { get; set; }
        public virtual DbSet<I_Sales> I_Sales { get; set; }
        public virtual DbSet<I_SalesGroup> I_SalesGroup { get; set; }
        public virtual DbSet<V_GetPaxList> V_GetPaxList { get; set; }
        public virtual DbSet<Cabin> Cabin { get; set; }

        public virtual int SP_Delete_PaxDefault(Nullable<int> id)
        {
            var customerIdParameter = id.HasValue ?
                    new SqlParameter("Id", id) :
                    new SqlParameter("Id", typeof(int));

            return this.Database.SqlQuery<int>("SP_Delete_PaxDefault @Id", customerIdParameter).SingleOrDefault();
        }

        public virtual int SP_Insert_CountReservation(Nullable<int> productCalenderId)
        {
            var customerIdParameter = productCalenderId.HasValue ?
           new SqlParameter("ProductCalenderId", productCalenderId) :
           new SqlParameter("ProductCalenderId", typeof(int));

            return this.Database.SqlQuery<int>("SP_Insert_CountReservation @ProductCalenderId", customerIdParameter).SingleOrDefault();
        }

        public virtual int SP_Insert_PaxDefault(string name)
        {
            var customerIdParameter = name != null ?
             new SqlParameter("Name", name) :
             new SqlParameter("Name", typeof(int));

            return this.Database.SqlQuery<int>("SP_Insert_PaxDefault @Name", customerIdParameter).SingleOrDefault();
        }


        public virtual ObjectResult<Nullable<int>> SP_Mover_AllPaxs(Nullable<int> productCalenderId, Nullable<int> targetcategoryProductId)
        {
            var productCalenderIdParameter = productCalenderId.HasValue ?
                new ObjectParameter("ProductCalenderId", productCalenderId) :
                new ObjectParameter("ProductCalenderId", typeof(int));

            var targetcategoryProductIdParameter = targetcategoryProductId.HasValue ?
                new ObjectParameter("TargetcategoryProductId", targetcategoryProductId) :
                new ObjectParameter("TargetcategoryProductId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Mover_AllPaxs", productCalenderIdParameter, targetcategoryProductIdParameter);
        }

        public virtual int SP_SetCharter(int? productCalenderId)
        {
            var customerIdParameter = productCalenderId.HasValue ?
                new SqlParameter("ProductCalenderId", productCalenderId) :
                new SqlParameter("ProductCalenderId", typeof(int));

            return this.Database.SqlQuery<int>("SP_SetCharter @ProductCalenderId", customerIdParameter).SingleOrDefault();
        }


        public virtual int SP_SetNoSalir(int? productCalenderId)
        {
            var customerIdParameter = productCalenderId.HasValue ?
                new SqlParameter("ProductCalenderId", productCalenderId) :
                new SqlParameter("ProductCalenderId", typeof(int));

            return this.Database.SqlQuery<int>("SP_SetNoSalir @ProductCalenderId", customerIdParameter).SingleOrDefault();
        }

        public virtual int SP_SetSalir(int? productCalenderId)
        {
            var customerIdParameter = productCalenderId.HasValue ?
                new SqlParameter("ProductCalenderId", productCalenderId) :
                new SqlParameter("ProductCalenderId", typeof(int));

            return this.Database.SqlQuery<int>("SP_SetSalir @ProductCalenderId", customerIdParameter).SingleOrDefault();
        }

        public virtual int SP_SetGastos(int? productCalenderId, int? categoryProductId)
        {
            var customerIdParameter = productCalenderId.HasValue ?
                new SqlParameter("ProductCalenderId", productCalenderId) :
                new SqlParameter("ProductCalenderId", typeof(int));

            var categoryProductIdParameter = categoryProductId.HasValue ?
                new SqlParameter("CategoryProductId", categoryProductId) :
                new SqlParameter("CategoryProductId", typeof(int));

            return this.Database.SqlQuery<int>("SP_SetGastos @ProductCalenderId, @CategoryProductId", customerIdParameter, categoryProductIdParameter).SingleOrDefault();
        }
    }
}
